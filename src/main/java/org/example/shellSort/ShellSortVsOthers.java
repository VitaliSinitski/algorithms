package org.example.shellSort;

import java.util.Arrays;
import java.util.concurrent.ThreadLocalRandom;

public class ShellSortVsOthers {
    public static void main(String[] args) {
        int numElems = 100_000_000;
        int[] numbers = new int[numElems];
        fillArray(numbers);
        long before = System.currentTimeMillis();
//        bubbleSort(numbers);
//        selectSort(numbers);
//        insertSort(numbers);
//        mergeSort(numbers, 0, numbers.length - 1);
//        shellSort(numbers);
        shellSortV2(numbers);
        long after = System.currentTimeMillis();
//        System.out.println("Bubble sort took time: " + (after - before) + " ms"); // 40-50ms (10_000) // 9_000ms (100_000) // ??? (1_000_000)
//        System.out.println("Select sort took time: " + (after - before) + " ms"); // 25-35ms (10_000) // 2_500ms (100_000) // 5min (1_000_000)
//        System.out.println("Insert sort took time: " + (after - before) + " ms"); // 10ms (10_000) // 550-590ms(100_000) // 55sec (1_000_000)
//        System.out.println("Merge sort took time: " + (after - before) + " ms"); // 2ms (10_000) // 20-30ms (100_000) // 120-130ms (1_000_000) // 1_350ms (10_000_000) // 14-15s (100_000_000)
//        System.out.println("Shell sort took time: " + (after - before) + " ms"); // 3ms (10_000) // 15ms (100_000) // 130ms (1_000_000) // 1800-1900ms (10_000_000) // 27-28s (100_000_000)
//        System.out.println("Shell sort took time: " + (after - before) + " ms"); // 1800-1900ms (10_000_000) // 27-28s (100_000_000)
        System.out.println("Shell sort V2 took time: " + (after - before) + " ms"); // 1750-1800ms (10_000_000) // 27-28s (100_000_000)
    }

    /*
     * Shell sort - представляет собой улучшенный вариант сортировки вставками, который выполняет множество сравнений и обменов элементов.
     * Он использует метод "сортировки с убывающим шагом" (diminishing increment sort).
     * Идея заключается в том, чтобы сначала сортировать элементы, находящиеся на большом расстоянии друг от друга,
     *      а затем постепенно уменьшать это расстояние, пока не достигнется окончательная сортировка.
     *
     * 1. Создание исходного массива.
     * 2. Инициализация переменной `step` как половины длины массива (`array.length / 2`).
     * 3. Вход в цикл `while`, который будет выполняться до тех пор, пока значение `step` больше 0.
     * 4. Вход во внутренний цикл `for`, который выполняется для каждого элемента массива начиная с `step`-го индекса.
     * 5. В каждой итерации цикла `for` выполняются следующие действия:
     *     - Запоминается значение элемента `array[i]` во временную переменную `temp`.
     *     - Создается переменная `j` и инициализируется ей значением `i`.
     *     - Вход во внутренний цикл `while`, который выполняется до тех пор, пока `j >= step` и элемент `array[j - step] > temp`.
     *     - В каждой итерации цикла `while` выполняются следующие действия:
     *         - Значение элемента `array[j - step]` копируется в текущий элемент `array[j]`.
     *         - Значение `j` уменьшается на `step`.
     *     - После выхода из цикла `while`, значение `temp` присваивается элементу `array[j]`.
     * 6. Уменьшение значения `step` в два раза (`step /= 2`).
     * 7. Возврат к шагу 4, если значение `step` больше 0.
     * 8. Вывод отсортированного массива `array` с помощью `System.out.println(Arrays.toString(numbers))`.
     */
    private static void shellSort(int[] array) {
        int step = array.length / 2;
        while (step > 0) {
            for (int i = step; i < array.length; i++) {
                int temp = array[i];
                int j = i;
                while (j >= step && array[j - step] > temp) {
                    array[j] = array[j - step];
                    j -= step;
                }
                array[j] = temp;
            }
            step /= 2;
        }
    }

    private static void shellSortV2(int[] array) {
        int step = array.length / 2;
        while (step > 0) {
            for (int i = step; i < array.length; i++) {
                int j = i;
                while (j >= step && array[j] < array[j - step]) {
                    swap(array, j, j - step);
                    j -= step;
                }
            }
            step /= 2;
        }
    }

    /*
     * Сортировка слиянием (merge sort) использует именно тот подход, когда берутся два отсортированных массива и сливаются в один.
     * Основная идея заключается в разделении исходного массива на половины,
     *      рекурсивной сортировке каждой половины и затем слиянии отсортированных половин в один отсортированный массив.
     *
     * Вызывается метод `mergeSort(array, 0, array.length - 1)`,
     *      передавая исходный массив, индекс начала (0) и индекс конца (длина массива - 1).
     *
     * В методе `mergeSort(int[] array, int left, int right)` проверяется условие `left < right`,
     *      которое определяет, что в массиве есть более одного элемента, которые нужно отсортировать.
     * Вычисляется индекс `mid`, который представляет середину массива.
     * Рекурсивно вызывается `mergeSort(array, left, mid)`, что приводит к сортировке левой половины массива (от `left` до `mid`).
     * Рекурсивно вызывается `mergeSort(array, mid + 1, right)`, что приводит к сортировке правой половины массива (от `mid + 1` до `right`).
     * Вызывается метод `merge(array, left, mid, right)`, который выполняет слияние двух отсортированных половин массива.
     *
     * В методе `merge(int[] array, int left, int mid, int right)` создается временный массив `temp`, который будет использоваться для слияния.
     * Инициализируются индексы `i` для левой половины, `j` для правой половины и `k` для временного массива.
     * В цикле `while` происходит сравнение элементов из левой и правой половин массива.
     *      Если элемент из левой половины меньше или равен элементу из правой половины,
     *          он записывается во временный массив `temp`, и индекс `i` увеличивается на 1.
     *      Если элемент из правой половины меньше, то он записывается во временный массив `temp`,
     *          и индекс `j` увеличивается на 1. Индекс `k` увеличивается на 1 после каждой записи во временный массив.
     * После выполнения цикла `while` проверяются условия, остались ли элементы только в левой или правой половине.
     *      Если остались, они копируются во временный массив `temp`.
     * Затем элементы из временного массива `temp` копируются обратно в исходный массив `array` в правильном порядке.
     */
    private static void mergeSort(int[] array, int left, int right) {
        if (left < right) {
            int mid = left + (right - left) / 2;
            mergeSort(array, left, mid);
            mergeSort(array, mid + 1, right);
            merge(array, left, mid, right);
        }
    }

    private static void merge(int[] array, int left, int mid, int right) {
        int[] temp = new int[right - left + 1];
        int i = left;
        int j = mid + 1;
        int k = 0;
        while (i <= mid && j <= right) {
            if (array[i] <= array[j]) {
                temp[k] = array[i];
                i++;
            } else {
                temp[k] = array[j];
                j++;
            }
            k++;
        }

        while (i <= mid) {
            temp[k] = array[i];
            i++;
            k++;
        }

        while (j <= right) {
            temp[k] = array[j];
            j++;
            k++;
        }

        for (int m = 0; m < temp.length; m++) {
            array[left + m] = temp[m];
        }
    }

    /*
     * Данный алгоритм заключается в выставлении маркера, слева от которого элементы будут уже частично отсортированы между собой.
     * На каждом шаге алгоритма будет выбираться один из элементов и помещаться на нужную позицию в уже отсортированной последовательности.
     * Таким образом, отсортированная часть будет увеличиваться до тех пор, пока не будут просмотрены все элементы.
     *
     * Внешний цикл начинается со второго элемента (индекс 1) и продолжается до конца массива.
     * Внутри внешнего цикла:
     * - Сохраняем текущий элемент во временной переменной temp.
     * - Инициализируем переменную j значением текущего индекса i.
     * - Внутренний цикл выполняется, пока j больше 0 и элемент array[j - 1] больше temp.
     * - Внутри внутреннего цикла сдвигаем элементы массива вправо, чтобы освободить место для вставки temp.
     * - Уменьшаем индекс j на 1, чтобы перейти к предыдущему элементу.
     * - После выхода из внутреннего цикла, вставляем temp в правильную позицию в массиве.
     * Повторяем эти шаги для каждого элемента, пока весь массив не будет отсортирован.
     */
    private static void insertSort(int[] array) {
        for (int i = 1; i < array.length; i++) {
            int temp = array[i];
            int j = i;
            while (j > 0 && array[j - 1] > temp) {
                array[j] = array[j - 1];
                j--;
            }
            array[j] = temp;
        }
    }

    /*
     * Пузырьковая сортировка работает путем сравнения и обмена элементов попарно, постепенно перемещая наибольшие элементы в конец массива.
     * Процесс повторяется до полной сортировки всего массива.
     *
     * Внешний цикл выполняется для прохода по элементам массива с конца до второго (или первого?) элемента.
     * Внутренний цикл выполняется для сравнения пар соседних элементов.
     * Если текущий элемент больше следующего элемента, вызывается метод swap для их обмена.
     * После завершения внутреннего цикла наибольший элемент смещается в конец массива.
     * Внешний цикл повторяется, уменьшая длину прохода на каждой итерации.
     * Повторяем эти шаги до тех пор, пока массив не будет полностью отсортирован по возрастанию.
     */
    private static void bubbleSort(int[] array) {
        for (int i = array.length - 1; i > 0; i--) {
            for (int j = 0; j < i; j++) {
                if (array[j] > array[j + 1]) {
                    swap(array, j, j + 1);
                }
            }
        }
    }

    /*
     * Сортировка выбором работает путем нахождения наименьшего элемента и перемещения его на правильную позицию в отсортированной части массива.
     * На каждой итерации мы увеличиваем размер отсортированной части и продолжаем поиск минимального элемента в оставшейся неотсортированной части массива.
     *
     * Объявляем переменную min для хранения индекса минимального элемента.
     * Внешний цикл выполняется для каждого элемента массива.
     * Внутри внешнего цикла:
     * - Инициализируем min текущим индексом i.
     * - Внутренний цикл выполняется для поиска минимального элемента среди оставшихся элементов.
     * - Если найден элемент, меньший текущего минимального, обновляем индекс min.
     * - После завершения внутреннего цикла вызываем метод swap для обмена текущего элемента с найденным минимальным элементом.
     * Повторяем эти шаги для каждого элемента, чтобы отсортировать массив по возрастанию.
     */
    private static void selectSort(int[] array) {
        int min;
        for (int i = 0; i < array.length; i++) {
            min = i;
            for (int j = i + 1; j < array.length; j++) {
                if (array[j] < array[min]) {
                    min = j;
                }
            }
            swap(array, i, min);
        }
    }

    private static void swap(int[] array, int ind1, int ind2) {
        int temp = array[ind1];
        array[ind1] = array[ind2];
        array[ind2] = temp;
    }

    private static void fillArray(int[] array) {
        for (int i = 0; i < array.length; i++) {
            array[i] = ThreadLocalRandom.current().nextInt(100_000_000);
        }
    }
}
