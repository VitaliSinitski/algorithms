#### Объяснение этапов итераций:

1. В основном методе `main` создаются необходимые переменные,
        включая массив альпинистов (`alpinists`), размер команды (`teamSize`),
        и запускается рекурсивный метод `generateCombinations`.
2. Метод `generateCombinations` принимает параметры:
        массив альпинистов, размер команды, текущую комбинацию и индекс,
        с которого начинается выбор следующего альпиниста.
3. Если размер команды `teamSize` равен 0, значит комбинация уже содержит трех альпинистов,
        поэтому мы выводим комбинацию на экран и возвращаемся из метода.
4. В цикле `for` начиная с индекса `startIndex` до `alpinists.length - teamSize`,
        мы перебираем возможных альпинистов, которых можно добавить в команду.
5. В каждой итерации цикла мы добавляем текущего альпиниста в комбинацию,
        вызываем рекурсивно метод `generateCombinations` для выбора оставшихся альпинистов
        (уменьшаем `teamSize` на 1 и увеличиваем `startIndex` на 1),
        и затем удаляем последнего добавленного альпиниста из комбинации.
6. Рекурсивные вызовы будут продолжаться, пока размер команды `teamSize` не станет равным 0,
        после чего программа вернется к предыдущему вызову и продолжит перебор других комбинаций.
7. При каждом достижении комбинации из трех альпинистов, она будет выведена на экран.

#### Итерации:

1. Начальный вызов метода `generateCombinations` осуществляется с параметрами
        `alpinists`, `3`, пустой комбинацией (`StringBuilder`), и индексом `0`.
2. В первой итерации цикла `for` выбирается альпинист `A` и добавляется в комбинацию.
3. Затем вызывается рекурсивный метод `generateCombinations` с параметрами
        `alpinists`, `2`, комбинацией `A`, и индексом `1`.
4. В этом вызове происходит следующее:
    - Выбирается альпинист `B` и добавляется в комбинацию `AB`.
    - Вызывается рекурсивный метод `generateCombinations` с параметрами
            `alpinists`, `1`, комбинацией `AB`, и индексом `2`.
    - В этом вызове происходит следующее:
        - Выбирается альпинист `C` и добавляется в комбинацию `ABC`.
        - Так как размер команды равен 0, комбинация `ABC` выводится на экран.
        - Возвращаемся к предыдущему вызову метода `generateCombinations`.
        - Удаляем альпиниста `C` из комбинации `AB`, чтобы перейти к другому варианту выбора.
        - Выбирается альпинист `D` и добавляется в комбинацию `ABD`.
        - Так как размер команды равен 0, комбинация `ABD` выводится на экран.
        - Возвращаемся к предыдущему вызову метода `generateCombinations`.
        - Удаляем альпиниста `D` из комбинации `AB`, чтобы перейти к другому варианту выбора.
        - Выбирается альпинист `E` и добавляется в комбинацию `ABE`.
        - Так как размер команды равен 0, комбинация `ABE` выводится на экран.
        - Возвращаемся к предыдущему вызову метода `generateCombinations`.
    - Удаляем альпиниста `B` из комбинации `A`, чтобы перейти к другому варианту выбора.
    - Выбирается альпинист `C` и добавляется в комбинацию `AC`.
    - Повторяется процесс аналогично предыдущему шагу.
    - Все комбинации с альпинистом `A` в начале сгенерированы.
5. Возвращаемся к начальному вызову метода `generateCombinations`.
6. Удаляем альпиниста `A` из комбинации, чтобы перейти к другому варианту выбора.
7. Выбирается альпинист `B` и повторяется процесс аналогично предыдущим шагам.
8. Повторяется для остальных альпинистов, генерируя все возможные комбинации.

В итоге, программа выведет на экран следующие 10 комбинаций:
ABC, ABD, ABE, ACD, ACE, ADE, BCD, BCE, BDE, CDE