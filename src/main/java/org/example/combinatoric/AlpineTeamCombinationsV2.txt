Шаг 1:
- Устанавливаем исходные данные: массив `alpinists` содержит имена альпинистов,
    а `teamSize` равно 3 (требуемый размер команды).

Шаг 2:
- Создаем список `combinations`, который будет содержать все возможные комбинации альпинистов.

Шаг 3:
- Вызываем функцию `generateCombinations` с исходными данными (`alpinists` и `teamSize`).
- Проверяем базовый случай: если `teamSize` равно 0,
    это означает, что мы сформировали команду нужного размера.
    В этом случае, создаем строку из выбранных альпинистов и добавляем ее в список `combinations`.

Шаг 4:
- Проверяем базовый случай: если `alpinists.length` меньше `teamSize`,
    то невозможно сформировать команду нужного размера из оставшихся альпинистов, поэтому прекращаем рекурсию.

Шаг 5:
- Создаем новый список `subCombinations`, в который будем сохранять подкомбинации,
    сгенерированные для оставшихся альпинистов.
- Перебираем всех альпинистов, начиная с `i = 0` и до `alpinists.length - teamSize + 1`.

Шаг 6:
- Вызываем `generateCombinations` с `subArray` и `teamSize - 1`
        для генерации комбинаций из оставшихся альпинистов.
- Получаем список подкомбинаций `subCombinations` и объединяем каждую из них с текущим альпинистом `alpinists[i]`,
        добавляя их в список `combinations`.

Шаг 7:
- По завершении цикла возвращаем список всех комбинаций.

-----------------------

Пример выполнения программы с исходными данными (алпинисты: A, B, C, D, E; размер команды: 3):
Шаг 1:
- Исходные данные:
    - `alpinists = ["A", "B", "C", "D", "E"]`
    - `teamSize = 3`

Шаг 2:
- Создаем пустой список `combinations`.

Шаг 3:
- Базовый случай не выполняется, так как `teamSize` не равно 0.

Шаг 4:
- Базовый случай не выполняется, так как `alpinists.length` (5) больше или равно `teamSize` (3).

Шаг 5:
- Итерация 1:
    - `i = 0`
    - Создаем новый список `subCombinations`.
    - Вызываем `generateCombinations` с `subArray = ["B", "C", "D", "E"]` и `teamSize - 1 = 2`.
    
    Шаг 1 (рекурсия):
    - Базовый случай не выполняется.
    
    Шаг 2 (рекурсия):
    - Базовый случай не выполняется.
    
    Шаг 5 (рекурсия):
    - Итерация 1 (рекурсия):
        - `i = 0`
        - Создаем новый список `subCombinations`.
        - Вызываем `generateCombinations` с `subArray = ["C", "D", "E"]` и `teamSize - 1 = 1`.

        Шаг 1 (рекурсия):
        - Базовый случай выполняется, так как `teamSize` равно 0.
        - Добавляем комбинацию "CDE" в `subCombinations`.
        
    - Итерация 2 (рекурсия):
        - `i = 1`
        - Создаем новый список `subCombinations`.
        - Вызываем `generateCombinations` с `subArray = ["B", "D", "E"]` и `teamSize - 1 = 1`.
        
        Шаг 1 (рекурсия):
        - Базовый случай выполняется, так как `teamSize` равно 0.
        - Добавляем комбинацию "BDE" в `subCombinations`.
        
    - Итерация 3 (рекурсия):
        - `i = 2`
        - Создаем новый список `subCombinations`.
        - Вызываем `generateCombinations` с `subArray = ["B", "C", "E"]` и `teamSize - 1 = 1`.
        
        Шаг 1 (рекурсия):
        - Базовый случай выполняется, так как `teamSize` равно 0.
        - Добавляем комбинацию "BCE" в `subCombinations`.
    
    Шаг 6 (рекурсия):
    - Добавляем "A" к каждой комбинации в `subCombinations` и добавляем их в `combinations`.
    
- Итерация 2:
    - `i = 1`
    - Создаем новый список `subCombinations`.
    - Вызываем `generateCombinations` с `subArray = ["C", "D", "E"]` и `teamSize - 1 = 2`.
    
    (...аналогичные шаги, как в итерации 1...)
    
- Итерация 3:
    - `i = 2`
    - Создаем новый список `subCombinations`.
    - Вызываем `generateCombinations` с `subArray = ["D", "E"]` и `teamSize - 1 = 2`.
    
    (...аналогичные шаги, как в итерации 1...)
    
- Итерация 4:
    - `i = 3`
    - Создаем новый список `subCombinations`.
    - Вызываем `generateCombinations` с `subArray = ["E"]` и `teamSize - 1 = 2`.
    
    (...аналогичные шаги, как в итерации 1...)
    

Шаг 7:
- Возвращаем список всех комбинаций: `["ABC", "ABD", "ABE", "ACD", "ACE", "ADE", "BCD", "BCE", "BDE", "CDE"]`.