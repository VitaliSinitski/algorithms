package org.example;

import java.util.Arrays;
import java.util.concurrent.ThreadLocalRandom;

public class ShellSortV1 {
    public static void main(String[] args) {
        int numElems = 100;
        int[] numbers = new int[numElems];
//        int[] numbers = {3, 7, 12, 23, 1 , 9, 18, 72, 14, 37};
        fillArray(numbers);
        System.out.println(Arrays.toString(numbers));
        shellSort(numbers);
        System.out.println(Arrays.toString(numbers));
    }

    private static void fillArray(int[] array) {
        for (int i = 0; i < array.length; i++) {
            array[i] = ThreadLocalRandom.current().nextInt(100);
        }
    }

    /*
     * Shell sort - это эффективный алгоритм сортировки, который является усовершенствованной версией сортировки вставками (insertion sort).
     * Этот алгоритм представляет собой улучшенный вариант сортировки вставками, который выполняет множество сравнений и обменов элементов.
     * Он использует метод "сортировки с убывающим шагом" (diminishing increment sort).
     * Идея заключается в том, чтобы сначала сортировать элементы, находящиеся на большом расстоянии друг от друга,
     *      а затем постепенно уменьшать это расстояние, пока не достигнется окончательная сортировка.
     *
     * 1. Создание исходного массива.
     * 2. Инициализация переменной `step` как половины длины массива (`array.length / 2`).
     * 3. Вход в цикл `while`, который будет выполняться до тех пор, пока значение `step` больше 0.
     * 4. Вход во внутренний цикл `for`, который выполняется для каждого элемента массива начиная с `step`-го индекса.
     * 5. В каждой итерации цикла `for` выполняются следующие действия:
     *     - Запоминается значение элемента `array[i]` во временную переменную `temp`.
     *     - Создается переменная `j` и инициализируется ей значением `i`.
     *     - Вход во внутренний цикл `while`, который выполняется до тех пор, пока `j` больше или равно `step` и элемент `array[j - step]` больше `temp`.
     *     - В каждой итерации цикла `while` выполняются следующие действия:
     *         - Значение элемента `array[j - step]` копируется в текущий элемент `array[j]`.
     *         - Значение `j` уменьшается на `step`.
     *     - После выхода из цикла `while`, значение `temp` присваивается элементу `array[j]`.
     * 6. Уменьшение значения `step` в два раза (`step /= 2`).
     * 7. Возврат к шагу 4, если значение `step` больше 0.
     * 8. Вывод отсортированного массива `array` с помощью `System.out.println(Arrays.toString(numbers))`.
     */
    private static void shellSort(int[] array) {
        // инициализация переменной `step` как половины длины массива
        int step = array.length / 2;
        // вход в цикл `while`, который будет выполняться до тех пор, пока значение `step` больше 0
        while (step > 0) {
            // вход во внутренний цикл `for`, который выполняется для каждого элемента массива начиная с `step`-го индекса
            for (int i = step; i < array.length; i++) {
                // в каждой итерации цикла `for` выполняются следующие действия:
                // - запоминается значение элемента `array[i]` во временную переменную `temp`
                int temp = array[i];
                // - создается переменная `j` и инициализируется ей значением `i`
                int j = i;
                // вход во внутренний цикл `while`, который выполняется до тех пор,
                // пока `j >= step` и элемент `array[j - step] > temp`
                while(j >= step && array[j - step] > temp) {
                    // в каждой итерации цикла `while` выполняются следующие действия:
                    // - значение элемента `array[j - step]` копируется в текущий элемент `array[j]`
                    array[j] = array[j - step];
                    // - значение `j` уменьшается на `step`
                    j -= step;
                }
                // после выхода из цикла `while`, значение `temp` присваивается элементу `array[j]`
                array[j] = temp;
            }
            // уменьшение значения `step` в два раза (`step /= 2`)
            step /= 2;
        }
    }
}
